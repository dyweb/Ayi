// Package cmd defines and implements command-line commands and flags
// used by Ayi. Commands and flags are implemented using Cobra.
// it is generated by cobra https://github.com/spf13/cobra/tree/master/cobra
// and modified following https://github.com/spf13/hugo/blob/master/commands/hugo.go
package cmd

import (
	"os"

	"github.com/fatih/color"
	"github.com/spf13/cobra"
	"github.com/spf13/viper"

	"github.com/dyweb/Ayi/util"
)

// Flags that are to be added to commands.
var cfgFile string
var (
	version bool
	verbose bool
)

// local shortcut shared among the whole cmd package, only needs to define in one file
var log = util.Logger

// RootCmd represents the base command when called without any subcommands
var RootCmd = &cobra.Command{
	Use:   "Ayi",
	Short: "Ayi makes your life easier",
	Long:  `Ayi is a collection of small applications and tools that speed up your develop process`,
	Run: func(cmd *cobra.Command, args []string) {
		if version {
			versionCmd.Run(cmd, args)
			return
		}

		// FIXME: print the help here
		// FIXME: On Windows, it works in cmd, but does not work in Git Bash
		color.Green("Use 'Ayi help' to see all commands")
	},
}

// Execute adds all child commands to the root command sets flags appropriately.
// This is called by main.main(). It only needs to happen once to the rootCmd.
func Execute() {
	if err := RootCmd.Execute(); err != nil {
		// TODO: use logger
		// https://github.com/spf13/cobra/issues/304
		// error message is printed twice for command not found
		// fmt.Println(err)
		os.Exit(-1)
	}
}

func loadDefaultSettings() {
	viper.SetDefault("Verbose", false)
}

func init() {
	cobra.OnInitialize(initConfig)

	// Here you will define your flags and configuration settings.
	// Cobra supports Persistent Flags, which, if defined here,
	// will be global for your application.

	RootCmd.PersistentFlags().StringVar(&cfgFile, "config", "", "config file (default is $HOME/.ayi.yaml)")
	RootCmd.PersistentFlags().BoolVar(&version, "version", false, "show current version")
	RootCmd.PersistentFlags().BoolVarP(&verbose, "verbose", "v", false, "verbose output")
	// Cobra also supports local flags, which will only run
	// when this action is called directly.
	RootCmd.Flags().BoolP("toggle", "t", false, "Help message for toggle")
}

// initConfig reads in config file and ENV variables if set.
func initConfig() {
	if cfgFile != "" { // enable ability to specify config file via flag
		viper.SetConfigFile(cfgFile)
	}

	viper.SetConfigName(".ayi")  // name of config file (without extension)
	viper.AddConfigPath("$HOME") // adding home directory as first search path
	viper.AddConfigPath(".")     // adding current folder as second search path
	viper.AutomaticEnv()         // read in environment variables that match

	err := viper.ReadInConfig()

	if verbose {
		util.UseVerboseLog()
	}

	if err == nil {
		log.WithField("file", viper.ConfigFileUsed()).Debug("Config file found")
	} else {
		log.Debug("Config file not found!")
	}

	loadDefaultSettings()

	// Update value from command line TODO: does viper support parse flag directly
	viper.Set("Verbose", verbose)
}
